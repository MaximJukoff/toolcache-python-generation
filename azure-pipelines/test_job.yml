jobs:
- job: Test_Python
  pool: 
    name: Azure Pipelines
    vmImage: $(VmImage)
  strategy:
    matrix:
      Cleanup-Python-Toolcache-Dir:
        IsCleanupMode: true
      Invoke-Pester-Tests:
        IsCleanupMode: false

  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      source: 'current'
      artifact: 'python-$(VERSION)-$(Architecture)-$(Platform)'
      path: $(Build.BinariesDirectory)

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: '$(Build.BinariesDirectory)/python-$(VERSION)-$(Architecture)-$(Platform).zip'
      destinationFolder: $(Build.BinariesDirectory)
      cleanDestinationFolder: false

  - task: PowerShell@2
    displayName: Sysconfig dump output
    inputs:
      TargetType: inline
      script: |
        Get-Content -Path "./sysconfig.txt"
      workingDirectory: '$(Build.BinariesDirectory)'
    condition: ne(variables['Platform'], 'windows')

  - task: PowerShell@2
    displayName: Check shared libraries
    inputs:
      TargetType: inline
      script: |
        if ($env:PLATFORM -match 'macos') { otool -l %PATH%/python } else { ldd %PATH%/python }
      workingDirectory: '$(Build.BinariesDirectory)'
    condition: ne(variables['Platform'], 'windows')

  - task: PowerShell@2
    displayName: Fully cleanup the toolcache directory
    inputs:
      TargetType: inline
      script: |
        if ($env:PLATFORM -match 'windows') {
          $PythonFilter = "Name like '%Python%'"
          Get-WmiObject Win32_Product -Filter $PythonFilter | Foreach-Object { 
            Write-Host "Uninstalling $($_.Name) ..."
            $_.Uninstall() | Out-Null 
          }
        }
        $PythonToolcachePath = Join-Path -Path $env:AGENT_TOOLSDIRECTORY -ChildPath "Python"
        Remove-Item -Path $PythonToolcachePath -Recurse -Force
      workingDirectory: '$(Build.BinariesDirectory)'
    condition: eq(variables['IsCleanupMode'], true)

  - task: PowerShell@2
    displayName: Apply build artifact to the local machines
    inputs:
      TargetType: inline
      script: |
        if ($env:PLATFORM -match 'windows') { ./setup.ps1 } else { sh ./setup.sh }
      workingDirectory: '$(Build.BinariesDirectory)'

  - task: UsePythonVersion@0
    displayName: 'Use Python $(VERSION)'
    inputs:
      versionSpec: '$(VERSION)'
      architecture: '$(Architecture)'

  - task: PowerShell@2
    displayName: Run tests
    inputs:
      TargetType: inline
      script: |
        Install-Module Pester -Force -Scope CurrentUser
        Import-Module Pester
        $pesterParams = @{
          Path="./Python.Tests.ps1";
          Parameters=@{
            Version="$(VERSION)";
            Platform="$(Platform)";
            ToolsDirectory="$(Agent.ToolsDirectory)";
          }
        }
        Invoke-Pester -Script $pesterParams -OutputFile "test_results.xml" -OutputFormat NUnitXml
      workingDirectory: '$(Build.SourcesDirectory)/tests'
    condition: ne(variables['IsCleanupMode'], true)

  - task: PublishTestResults@2
    displayName: Publish test results
    inputs:
      testResultsFiles: '*.xml'
      testResultsFormat: NUnit
      searchFolder: 'tests'
      failTaskOnFailedTests: true
    condition: ne(variables['IsCleanupMode'], true)