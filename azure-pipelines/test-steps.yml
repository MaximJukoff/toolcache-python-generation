steps:
- task: DownloadPipelineArtifact@2
  inputs:
    source: 'current'
    artifact: 'python-$(VERSION)-$(Architecture)-$(Platform)'
    path: $(Build.BinariesDirectory)

- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: '$(Build.BinariesDirectory)/python-$(VERSION)-$(Architecture)-$(Platform).zip'
    destinationFolder: $(Build.BinariesDirectory)
    cleanDestinationFolder: false

- task: PowerShell@2
  displayName: Sysconfig dump output
  inputs:
    TargetType: inline
    script: |
      Get-Content -Path "./sysconfig.txt"
    workingDirectory: '$(Build.BinariesDirectory)'
  condition: ne(variables['Platform'], 'windows')

- task: PowerShell@2
  displayName: Apply build artifact to the local machines
  inputs:
    TargetType: inline
    script: |
      if ($env:PLATFORM -match 'windows') { ./setup.ps1 } else { sh ./setup.sh }
    workingDirectory: '$(Build.BinariesDirectory)'

- task: UsePythonVersion@0
  displayName: 'Use Python $(VERSION)'
  inputs:
    versionSpec: '$(VERSION)'
    architecture: '$(Architecture)'

- task: PowerShell@2
  displayName: Check shared libraries
  inputs:
    TargetType: inline
    script: |
      $pythonLocation = which python
      if ($env:PLATFORM -match 'macos') { otool -l $pythonLocation } else { ldd $pythonLocation }
    workingDirectory: '$(Build.BinariesDirectory)'
  condition: ne(variables['Platform'], 'windows')

- task: PowerShell@2
  displayName: Run tests
  inputs:
    TargetType: inline
    script: |
      Install-Module Pester -Force -Scope CurrentUser
      Import-Module Pester
      $pesterParams = @{
        Path="./Python.Tests.ps1";
        Parameters=@{
          Version="$(VERSION)";
          Platform="$(Platform)";
        }
      }
      Invoke-Pester -Script $pesterParams -OutputFile "test_results.xml" -OutputFormat NUnitXml
    workingDirectory: '$(Build.SourcesDirectory)/tests'

- task: PublishTestResults@2
  displayName: Publish test results
  inputs:
    testResultsFiles: '*.xml'
    testResultsFormat: NUnit
    searchFolder: 'tests'
    failTaskOnFailedTests: true
    testRunTitle: "$(TestRunTitle)"
  condition: always()